{"list":[{"title":"现代图形学入门","source":"_posts/1.md","path":"2021/11/04/1/","category":"图形学","links":{"int":[],"ext":[],"toc":["#Rasterization","#What’s-After-MVP","#Sampling-Artifacts-in-Computer-Graphics","#Visibility-Occlusion","#Painter’s-Algorithm","#Z-Buffer","#Z-Buffer-Algorithm","#Shading","#Definition","#Lambertian-Diffuse-Shading","#Specular-Term-Blinn-Phong","#Ambient-Term","#Graphics-Pipeline","#Interpolation-Across-Triangles","#Barycentric-Coordinates","#Texture-Mapping","#Simple-Texture-Mapping","# 一种解释方法","# 另一种解释方法","#Texture-Magnification- 纹理放大","#What-if-the-texture-is-too-small","#What-if-the-texture-is-too-large","#Mipmap","#Computing-Mipmap-Level-D","#Trilinear-Interpolation","#Geometry","#Implicit-Geometry","#Explict-Geometry","#B-acute-e-zier-Curve","#de-Castekjau-Algorithm","#Evaluating-B-acute-e-zier-Curves-Algebraic-Formula","#B-acute-e-zier-Surfaces","#Shadow-Mapping","#Render-from-light","#Render-from-eye","#Project-to-light","#Ray-Tracing","#Recursive-Whitted-Style-Ray-Tracing","#Ray-Surface-Intersection","#Spatial-Partitions（空间划分）","#Object-Partitions（物体划分）-amp-Bounding-Volume-Hierarchy-BVH","#Radiometry（辐射度量学）","#Bidirectional-Reflectance-Distribution-Function-BRDF","#Refection-at-a-point","#The-Reflection-Equation","#The-Rendering-Equation","#Rendering-Equation-as-Intergral-Equation","#Path-Tracing","#Materials-and-Appearances","#Diffuse-Lambertian-Material","#Glossy-Material","#Perfect-Specular-Reflection","#Specular-Refraction","#Fresnel-Reflection-Term","#MicroFacet-Material","#Microfacet-Theory","#Microface-BRDF","#Properties-of-BRDFs","#Measuring-BRDFs","#Cameras-Lenses（棱镜）-and-Light-Fields（光场）","#Color-and-Perception","#Addtive-Color（加色系统）","#Color-Spaces"]}},{"title":"Pipeline and Shading","source":"_posts/10.md","path":"2021/11/12/10/","category":"GAMES-101 Assignments","links":{"int":[],"ext":["https://silhouettesforyou.github.io/2021/11/09/8/"],"toc":["# 光栅化","#shadingcoords","#Normal","#Blinn-Phong","# 漫反射（Diffuse-Term）","# 高光（Specular-Term）","# 环境光（Ambient-Term）","#Blinn-Phong-Refection-Model","#Texture-Shader-Fragment","#Bump-Mapping","# 法线贴图原理","#UV- 与 -TB- 的关系","#Displacement-Mapping"]}},{"title":"顶点着色器和片元着色器","source":"_posts/11.md","path":"2021/11/12/11/","category":"图形学","links":{"int":[],"ext":[],"toc":["# 顶点着色器","# 输入参数","# 输出参数","# 片元着色器","# 输入参数 -1","# 输出参数 -1"]}},{"title":"包围盒","source":"_posts/15.md","path":"2021/11/17/15/","category":"图形学","links":{"int":[],"ext":[],"toc":["# 轴对齐包围盒（Axis-Aligned-Bounding-Box，AABB）","# 有向包围盒（Oriented-Bounding-Box，OBB）"]}},{"title":"Lua GC机制","source":"_posts/16.md","path":"2021/11/22/16/","category":"日常","links":{"int":[],"ext":[],"toc":["# 垃圾回收","# 垃圾回收器函数","#gc- 算法分析","# 对象链表","# 什么时候会导致 -gc","# 回收控制","#GC- 的过程","# 弱表","# 终结函数"]}},{"title":"红黑树","source":"_posts/17.md","path":"2021/11/22/17/","category":"面试","links":{"int":[],"ext":[],"toc":["# 红黑树","# 红黑树的性质","# 红黑树的数据结构","# 红黑树的时间复杂度","# 红黑树保持平衡的三种操作"]}},{"title":"Vulkan Note","source":"_posts/18.md","path":"2021/11/22/18/","category":"图形学","links":{"int":[],"ext":["https://www.youtube.com/watch?v=P_I8an8jXuM&t=26s"],"toc":[]}},{"title":"Latex公式","source":"_posts/19.md","path":"2021/11/22/19/","category":"Latex","links":{"int":[],"ext":[],"toc":["# 希腊字母","# 二元操作符","# 关系运算符","# 标点符号","# 箭头","# 其他符号","# 大小可变符号","# 分隔符","# 重音符号","# 数学公式","# 常用公式","# 括号","# 方程组","# 矩阵"]}},{"title":"OpenGL基础","source":"_posts/2.md","path":"2021/11/04/2/","category":"图形学","links":{"int":[],"ext":[],"toc":["#OpenGL- 上下文（Context）","# 帧缓冲区 -FrameBuffer）","#Attachment","# 纹理（Texture）和渲染缓冲区（Render-Buffer）","# 顶点数组（Vertex-Array）和顶点缓冲区（Vertex-Buffer）","# 索引数组（Element-Array）和索引缓冲区（Element-Buffer）","# 顶点着色器（Vertex-Shader）","# 片段着色器（Fragment-Shader）","# 逐片元操作（Per-Fragment-Operation）","# 测试（Test）","# 混合（Blending）","# 抖动（Dithering）","# 渲染到纹理","# 渲染上屏 - 交换缓冲区（Swap-Buffer）"]}},{"title":"日常开发笔记","source":"_posts/3.md","path":"2021/11/04/3/","category":"日常","links":{"int":[],"ext":["https://stackoverflow.com/questions/39268753/what-is-the-difference-between-yield-return-0-and-yield-return-null-in-corou","https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/operators/lambda-operator"],"toc":["#Git相关","#相关命令","#Hexo部署的博客Git提交到Github账户错乱的问题","#解决方法","#Git文件目录结构解析","#Git切换远端分支","#查看所有分支","#新建分支并切换到指定分支","#查看本地分支及追踪的分支","#git-cherry-pick用法","#转移一个提交","#转移多个提交","#Unity相关","#几种Update方法的区别","#Update","#FixedUpdate","#LastUpdate","#Unity3D内存管理——对象池（Object-Pool）","#协程","#协程的执行原理","#IEnumberator","#yield","#中断函数类型","#Unity-EditorWindow的OnGUI刷新","#C-相关","#C-泛型约束","#default函数","#C-中is，as，using关键字的使用","#ref和out关键字","#C-特性标签（Attribute）","#创建自定义特性","#访问特性","#特性与注释的区别","#Action委托与Func委托","#Activator-CreateInstance-lt-T-gt-与new","#C-资源回收和IDisposable接口的使用","#C-中数组、ArrayList和List三者的区别","#数组","#ArrayList","#泛型List","#Lambda表达式","#C-API","#C-相关-1","#C-几个预定义的宏","#Lua相关","#Lua语法","#Lua-堆栈操作","#Lua中的模式匹配（Pattern-Matching）","#character-classes","#magic-characters","#function-or-expression-needs-too-many-registers","#Lua中的模块与module函数","#编写模块的基本方法","#module函数","#抵制使用module函数来定义Lua模块","#比较推荐的模块定义方法","#引用示例代码","#Python相关","#生成requirements-txt文件","#方法一","#方法二"]}},{"title":"渲染管线","source":"_posts/4.md","path":"2021/11/05/4/","category":"图形学","links":{"int":[],"ext":[],"toc":["# 应用阶段","# 几何阶段","# 光栅化阶段","# 顶点数据","# 顶点着色器","# 图元装配","# 几何着色器","# 光栅化","# 片元着色器","# 混合处理阶段"]}},{"title":"C++知识","source":"_posts/5.md","path":"2021/11/08/5/","category":"面试","links":{"int":[],"ext":["https://blog.twofei.com/496/#object_layout"],"toc":["#C- 虚函数","# 虚函数的作用","# 虚函数的原理","# 定义一个有虚函数的类","# 定义一个子类","#c- 中的纯虚函数","# 虚析构函数","#C- 中函数重载、重写和重定义","# 智能指针 shared-ptr、weak-ptr、unique-ptr","#shared-ptr","#weak-ptr","#unique-ptr","# 引用计数是在对上还是栈上"]}},{"title":"哈希表","source":"_posts/6.md","path":"2021/11/08/6/","category":"面试","links":{"int":[],"ext":[],"toc":["# 哈希表","# 哈希表函数的构造方法","# 直接定址法","# 除留余数法","# 数字分析法","# 平方取中法","# 处理冲突的方法","# 开放寻址法","# 再散列法","# 链地址法（拉链法）","# 建立一个公共溢出区","# 哈希表的查找"]}},{"title":"高质量实时渲染","source":"_posts/7.md","path":"2021/11/08/7/","category":"图形学","links":{"int":[],"ext":["22.md"],"toc":["#OpenGL","#Vertex-Shader-amp-Fragment-Shader","#Shadow-Mapping","#Render-from-Light-amp-Eye","#Project-to-light-for-shadows","#Issues-in-Shadow-Mapping","#Self-Occlusion","#Alias","# 实时渲染中阴影背后的数学知识","#Percentage-Closer-Soft-Shadows","#The-complete-algorithm-of-PCSS","#Which-region-to-perform-blocker-search- 如何确定 -blocker- 的大小","#Variance-Soft-Shadow-Mapping","#A-Deeper-Look-at-PCF","#Variance-Soft-Shadow-Mapping-1","#Which-step-s-can-be-slow","#steps","#steps","#Variance-Soft-Shadow-Mapping-2","#Blocker-search","#steps","#SAT-for-Range-Query","#Classic-data-structure-and-algorithm-prefix-sum- 经典数据结构——前缀和","# 一维：","# 二维：","#Shadow-Mapping-1","#Moments","#What-can-moments-do","#Environment-Mapping","#Distance-Field-Soft-Shadow","#The-Usages-of-Distance-Fields","#How-to-compute-the-safe-angle","#Shading-from-Environment-Lighting","#How-to-use-it-to-shade-point-without-shadows","#The-Split-Sum-1st-Stage","#The-Split-Sum-2nd-Stage","#Shadow-from-environment-lighting","#Different-perspectives-of-view","#Industrial-solution","#Precomputed-Radiance-Transfer","#Background-knowledge","#Fourier-Transform","#A-general-understanding","#Basis-Functions","#Real-time-environment-lighting","#Spherical-Harmonics","#Analytic-Irradiance-Formula","#A-Brief-Summarization","#Precomputed-Radiance-Transfer-1","#Rendering-under-environment-lighting","#Basic-idea-of-PRT","#Diffuse-Case","#coefficient","#Glossy-Case","#Interreflections-and","#Basis-Functions-B-mathbf-i","#Properties- 性质","#More-basis-functions","#Precomputation","#Run-time-Rendering","#Real-Time-Global-Illumination","#Reflective-Shadow-Maps-RSM","#Light-Propagation-Volumes-LPV","#Steps","#Light-leaking","#Voxel-Global-Illumination-VXGI","#Real-Time-Global-Illumination-Screen-Space","#Screen-Space-Ambient-Occlusion-SSAO","#Why-AO- 为什么要","#What-is-SSAO","#Theory","#Ambient-occlusion-using-the-z-buffer","#Horizon-based-ambient-occlusion-HBAO","#Screen-Space-Directional-Occlusion-SSDO","#Very-similar-to-path-tracing","#Comparison-with-SSAO","#Consider-unoccluded-and-occluded-directions-separately","#SSDO-similar-to-HBAO","#Issues","#Screen-Space-Reflection-SSR","#What-is-SSR","#Two-fundametal-tasks-of-SSR","#Basic-SSR-Algorithm-Mirror-Reflection","#Why-Depth-Mipmap","#Problem","#Shading-using-SSR","#Real-Time-Physically-Based-Materials-surface-models","#Microfacet-BRDF- 微表面","#PBR-and-PBR-Materials","#Microfacet-BRDF","#F-mathbf-i-mathbf-h-Fresnel-term","#G-mathbf-i-mathbf-o-mathbf-h-shadowing-masking-term","#D-mathbf-h-distribution-of-normals-NDF-Normal-Distribution-Function- 法线的分布","#Normal-Distribution-Function-NDF","#Beckmann-NDF","#GGX-or-Trowbridge-Reitz","#Extending-GGX","#Shadowing-Masking-Term","#A-commonly-used-shadowing-masking-term","#Kulla-Conty-Approximation-for-Multiple-Bounces","#ref-1","#Shading-Microfacet-Models-using-Linearly-Transformed-Cosines-LTC","#Disney’s-Principled-BRDF","#Non-Photorealistic-Rendering-NPR- 非真实感渲染）","#Outline-Rendering","#Outline-Rendering-–-Shading-Silhouette","#Outline-Rendering-–-Geometry","#Outline-Rendering-–-Image","#Color-blocks- 大量的色块","#Some-Note","#Real-Time-Ray-Tracing-RTRT","#Back-Projection","#Temporal-Accum-Denoising","#Implementation-of-filtering","#Bilateral-filtering- 双边滤波","#Joint-Bilateral-filtering- 联合双边滤波","#Implementing-Large-Filters","#Removal","#Outlier-Detection-and-Clamping","#Spatiotemporal-Variance-Guided-Filtring-SVGF","#Recurrent-AutoEncoder-RAE","#A-of-Instustrail-Solution","#Temporal-Anti-Aliasing-TAA","#Temporal-Super-Resolution","#Deferred-Shading","#Tiled-Shading","#Clustered-Shading","#Level-of-Detail-LoD-Solutions","#Global-Illumination-Solutions","#A-lot-of-uncovered-topics"]}},{"title":"Triangles and Z-Buffer","source":"_posts/8.md","path":"2021/11/09/8/","category":"GAMES-101 Assignments","links":{"int":[],"ext":["https://www.cnblogs.com/1Kasshole/p/14062190.html","https://zhuanlan.zhihu.com/p/380634903","https://www.comp.nus.edu.sg/~lowkl/publications/lowk_persp_interp_techrep.pdf"],"toc":["# 投影矩阵","# 透视投影矩阵推导","# 旋转与投影代码","# 三维空间中判断一个点是否在三角形内","# 光栅化","# 计算重心坐标","#ref-1","#ref-2"]}},{"title":"Linux 内核——offsetof和container_of","source":"_posts/9.md","path":"2021/11/12/9/","category":"Linux","links":{"int":[],"ext":["https://stackoverflow.com/questions/18554721/how-to-understand-size-t-type-0-member"],"toc":[]}},{"title":"B站学习资料","source":"_posts/13.md","path":"2021/11/15/13/","category":"Knowledge-Repository","links":{"int":["//www.bilibili.com/video/BV1X7411F744","//www.bilibili.com/video/BV1YK4y1T7yY","//www.bilibili.com/video/BV1at411D7YV","//www.bilibili.com/video/BV1pu411o7BE"],"ext":[],"toc":["#GAMES101- 现代计算机图形学入门","#GAMES202- 高质量实时渲染","# 计算机图形学（清华大学胡事民教授）","#Transformer- 论文逐段精读"]}},{"title":"蔬食戏书","source":"_posts/14.md","path":"2021/11/15/14/","category":"会须一饮三百杯","links":{"int":["//www.bilibili.com/video/BV1hf4y1C7XU","//www.bilibili.com/video/BV1Rw411R71N","//www.bilibili.com/video/BV18s411J7cm","//www.bilibili.com/video/BV1UA411P7Yg","//www.bilibili.com/video/BV1yy4y1V7AF","//www.bilibili.com/video/BV1Nf4y1s74W","//www.bilibili.com/video/BV1Nf4y1s74W","//www.bilibili.com/video/BV1mT4y1F7Wy","//www.bilibili.com/video/BV15q4y1T7Z1"],"ext":["https://surl.amap.com/j4iT5Md17gz9","https://surl.amap.com/3OmbgdX82Ls","https://surl.amap.com/iYHMkzLXcE7","https://surl.amap.com/iWipZ3zd7yc","https://surl.amap.com/iUZSRHb1gepc","https://surl.amap.com/iU1flahA4RS","https://surl.amap.com/iSOghKxrcZM","https://surl.amap.com/iPsqGmtE5tT"],"toc":["# 黄焖鸡","# 京酱肉丝","# 炝炒土豆丝","# 酸汤肥牛","# 椒盐蒜香鸡翅","# 回锅肉","# 小河虾","# 红烧鲈鱼","# 蒜蓉大虾"]}},{"title":"江城子·密州出猎","source":"_posts/22.md","path":"2021/11/24/22/","category":"会须一饮三百杯","links":{"int":[],"ext":["https://zhuanlan.zhihu.com/p/19763358?from=singlemessage&isappinstalled=1","https://www.zhihu.com/question/23175691/answer/24579168","https://github.com/yourwanghao/CMUComputationalPhotography/blob/master/class6/Notebook6.ipynb"],"toc":["#ref-1","# 的频谱","# 的的相位谱","# 傅里叶分析的用处","# 图像处理","# 工程应用","# 求解微分方程","#","#ref-2","#3D- 视角","#-1","# 欧拉公式","# 指数形式的傅里叶变换","# 再次理解正弦波","# 正螺旋面","# 图像傅里叶变换和傅里叶逆变换原理及实现","# 相关代码","#ref-3","# 普通图像的傅里叶变换结果"]}},{"title":"Whitted Style Ray Tracing","source":"_posts/21.md","path":"2021/11/22/21/","category":"GAMES-101 Assignments","links":{"int":[],"ext":[],"toc":["# 从摄像机位置向屏幕像素点发射光线","# 是否与三角形相交","# 最终结果"]}},{"title":"Accelerate Ray Tracing","source":"_posts/23.md","path":"2021/11/24/23/","category":"GAMES-101 Assignments","links":{"int":[],"ext":["https://silhouettesforyou.github.io/2021/11/22/21/"],"toc":["# 发射光线和与光线三角形求交","# 发射光线","# 光线与三角形相交","# 是否与包围盒相交","#BVH-Traversal","# 结果"]}},{"title":"Fitness","source":"_posts/24.md","path":"2021/11/25/24/","category":"会须一饮三百杯","links":{"int":[],"ext":[],"toc":[]}},{"title":"Bézier Curve","source":"_posts/20.md","path":"2021/11/22/20/","category":"GAMES-101 Assignments","links":{"int":[],"ext":[],"toc":["#de-Castekjau-Algorithm","# 相关代码","# 结果"]}},{"title":"Path Tracing","source":"_posts/25.md","path":"2021/12/02/25/","category":"GAMES-101 Assignments","links":{"int":[],"ext":["https://pharr.org/matt/blog/images/pbr-2003.pdf"],"toc":["#Monte-Carlo-Integration","# 概率相关知识","# 几个定理","# 蒙特卡洛法积分","# 重要性采样","#GGX（Trowbridge-Reitz）分布","#Path-Tracing","#A-Simple-Monte-Carlo-Solution","#","#Problem-1-Explosion-of-rays-as-bounces-go-up","#Problem-2-The-recursive-algorithm-will-never-stop","#-1","# 相关代码","# 相关函数","#Scene-sampleLight→MeshTriangle-Sample→BVHAccel-Sample","#Material-sample","#ref-1","#Scene-intersect","#Material-pdf","#Material-eval","# 结果"]}},{"title":"Photo Gallery","source":"_posts/26.md","path":"2021/12/07/26/","category":"none","links":{"int":[],"ext":[],"toc":[]}},{"title":"Template II","source":"_posts/27.md","path":"2021/12/08/27/","category":"相册","links":{"int":[],"ext":[],"toc":[]}},{"title":"WebGL框架的使用与Blinn-Phong着色模型","source":"_posts/28.md","path":"2021/12/10/28/","category":"GAMES-202 Assignments","links":{"int":[],"ext":[],"toc":[]}},{"title":"Windows Terminal配置","source":"_posts/29.md","path":"2021/12/14/29/","category":"工具","links":{"int":[],"ext":["https://docs.microsoft.com/en-us/windows/terminal/customize-settings/profile-appearance#color-settings","https://ohmyposh.dev/docs/themes"],"toc":["#Appearance-profile-settings-in-Windows-Terminal","#defaults","# 安装 -Scoop","# 美化 -Power-Shell","#Themes","# 设置 -Themes"]}},{"title":"激活Typora","source":"_posts/30.md","path":"2022/01/04/30/","category":"Tools","links":{"int":[],"ext":[],"toc":["# 克隆 -GitHub- 仓库","# 安装依赖环境","# 创建输出目录","# 生成破解文件","# 替换 License-js 文件","# 重新生成 app-asar 文件","# 替换 app-asar","# 生成序列号"]}},{"title":"tolua原理解析","source":"_posts/31.md","path":"2022/01/12/31/","category":"日常","links":{"int":[],"ext":[],"toc":["#lua- 虚拟栈","#lua- 代码","#C- 代码","#lua- 热更新原理","#C- 调用 -lua","#lua- 调用 -C","# 反射","# 反射用到的命名空间","# 反射用到的主要类","# 去反射","#Wrap","#BeginStaticLibs","#EndStaticLibs","#RegFunction"]}},{"title":"Lua API","source":"_posts/33.md","path":"2022/01/14/33/","category":"日常","links":{"int":[],"ext":[],"toc":["#lua-gettable","#lua-settable","#lua-rawset-amp-lua-rawget","#lua-rawseti-amp-lua-rawgeti"]}},{"title":"Perforce 学习","source":"_posts/34.md","path":"2022/01/25/34/","category":"日常","links":{"int":[],"ext":[],"toc":["#Using-Changelists-to-Manage-Files","#Checkout","#Changelists","#Changelist- 内容","#Changelist- 种类","# 默认 -Changelist- 和编号 -Changelist","#Changelist- 编号机制","#Cleaning-up-files-and-directories"]}},{"title":"Lua 学习资料","source":"_posts/35.md","path":"2022/01/27/35/","category":"知识库","links":{"int":[],"ext":[],"toc":["#《Lua设计与实现》","#《Lua源码欣赏》"]}},{"title":"C++11新特性","source":"_posts/32.md","path":"2022/01/13/32/","category":"日常","links":{"int":[],"ext":[],"toc":["#auto-amp-decltype","#auto","#decltype","# 左值和右值","# 列表初始化","# 列表初始化的一些规则","#std-initializer-list","#std-function-amp-std-bind-amp-lambda 表达式","#std-function","#std-bind","#lambda 表达式","# 小结","# 模板的改进","# 模板的右尖括号","# 模板的别名","# 函数模板的默认模板参数","# 并发","# 智能指针","# 基于范围的 -for- 循环","# 委托构造函数","# 继承构造函数","# 关键字","#nullptr","#final-amp-override","#default","#delete","#explicit","# 不用 explicit","# 使用 explicit","#constexpr","#enum-class","#sizeof","#assertion","# 内存对齐","# 什么是内存对齐","# 为什么要内存对齐","# 随机数功能","# 正则表达式"]}},{"title":"Git常用命令","source":"_posts/36.md","path":"2022/02/09/36/","category":"日常","links":{"int":[],"ext":[],"toc":["# 强制覆盖本地代码（与 -git- 远程仓库保持一致）","#Please-move-or-remove-them-before-you-can-merge","#Git- 推送本地分支到远端","# 远程先开好分支然后拉到本地","# 本地先开好分支然后推送到远程","#Git- 回滚代码到某个 -commit","#"]}},{"title":"C++14新特性","source":"_posts/35.md","path":"2022/02/09/35/","category":"日常","links":{"int":[],"ext":[],"toc":["# 函数返回值类型推导","#lambda 参数 auto","# 变量模板","# 别名模板","#constexpr 的限制","#deprecated- 标记","# 二进制字面量与整形字面量分隔符","#std-make-unique","#std-shared-timed-mutex 与 std-shared-lock","#std-integer-sequence","#std-exchange","#std-quoted"]}},{"title":"C++17新特性","source":"_posts/38.md","path":"2022/02/22/38/","category":"日常","links":{"int":[],"ext":[],"toc":["# 构造函数模板推导","# 结构化绑定","#if-switch 语句初始化","# 内联变量","# 折叠表达式","#constexpr-lambda 表达式","#namespace 嵌套","#has-include 预处理表达式","# 在 lambda 表达式用 -this 捕获对象副本","# 新增 Attribute","# 字符串转换","#std-variant","#std-optional","#std-any","#std-apply","#std-make-from-tuple","#std-string-view","#as-const","#file-system","#std-shared-mutex"]}},{"title":"日常开发笔记","source":"_posts/3.md","path":"2021/11/05/3/","category":"日常","links":{"int":[],"ext":["https://stackoverflow.com/questions/39268753/what-is-the-difference-between-yield-return-0-and-yield-return-null-in-corou","https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/operators/lambda-operator"],"toc":["#Git- 相关","# 相关命令","#Hexo- 部署的博客 -Git- 提交到 -Github- 账户错乱的问题","# 解决方法","#Git- 文件目录结构解析","#Git- 切换远端分支","# 查看所有分支","# 新建分支并切换到指定分支","# 查看本地分支及追踪的分支","#git-cherry-pick 用法","# 转移一个提交","# 转移多个提交","#Unity- 相关","# 几种 Update 方法的区别","#Update","#FixedUpdate","#LastUpdate","#Unity3D- 内存管理——对象池（Object-Pool）","# 协程","# 协程的执行原理","#IEnumberator","#yield","# 中断函数类型","#Unity-EditorWindow- 的 OnGUI 刷新","#C- 相关","#C- 泛型约束","#default 函数","#C- 中 is，as，using 关键字的使用","#ref 和 out 关键字","#C- 特性标签（Attribute）","# 创建自定义特性","# 访问特性","# 特性与注释的区别","#Action 委托与 Func 委托","#Activator-CreateInstance-lt-T-gt- 与 new","#C- 资源回收和 IDisposable 接口的使用","#C- 中数组、ArrayList 和 List 三者的区别","# 数组","#ArrayList","# 泛型 List","#Lambda- 表达式","#C-API","#C- 相关 -1","#C- 几个预定义的宏","#Lua- 相关","#Lua- 语法","#Lua- 堆栈操作","#Lua- 中的模式匹配（Pattern-Matching）","#character-classes","#magic-characters","#function-or-expression-needs-too-many-registers","#Lua- 中的模块与 -module- 函数","# 编写模块的基本方法","#module 函数","# 抵制使用 module 函数来定义 -Lua- 模块","# 比较推荐的模块定义方法","# 引用示例代码","#Python- 相关","# 生成 requirements-txt 文件","# 方法一","# 方法二"]}},{"title":"破解GitKraken","source":"_posts/40.md","path":"2022/03/08/40/","category":"Tools","links":{"int":[],"ext":["https://www.gitkraken.com/","https://www.sourcetreeapp.com/","https://github.com/5cr1pt/GitCracken"],"toc":["#GitKraken- 简介","#GitKraken- 连接 -GitLab","#Start-a-hosted-repo","# 获得 -Personal-Access-Token","# 连接成功","# 破解","# 安装 yarn","# 运行破解项目"]}},{"title":"C++20新特性","source":"_posts/39.md","path":"2022/03/07/39/","category":"C++","links":{"int":[],"ext":[],"toc":["#Domain-Primitive-DP"]}},{"title":"42","source":"_posts/42.md","path":"2022/08/06/42/","category":"图形学","links":{"int":[],"ext":[],"toc":["# 基础知识","# 什么是 -Shader-Variant","#Material-Shader-Keywords- 与 -Shader-Variant","#multi-compile 与 shader-feature","#multi-compile 的用法解析","#shader-feature 用法简析","# 如何控制项目中 -Shader- 变体的生成","# 使用 shader-feature 的解决方案：ShaderVariantCollection","#ShaderVariantCollection- 介绍","#ShaderVariantCollection- 生成通过 shader-feature 定义的变体规则","# 变体的调用规则","# 项目中变体的添加","# 变体代码在 -Shader- 中编写规范"]}},{"title":"Lua小知识（转载）","source":"_posts/44.md","path":"2022/08/15/44/","category":"日常","links":{"int":[],"ext":["https://github.com/sumneko/lua-without-check-nil/blob/master/without-check-nil.lua","http://www.inf.puc-rio.br/~roberto/docs/ry08-06.pdf"],"toc":["# 数组元素的插入与删除","#Try-Catch","# 判空","# 总结","# 提升性能的写法","# 一些坑","# 拼接字符串","# 空（none）与 nil","# 不定参","# 环境与沙盒","# 垃圾回收","# 增量回收","# 写屏障","# 再次灰色","# 弱引用","# 清理弱表","# 终结器（解析器）"]}},{"title":"Unity面试","source":"_posts/45.md","path":"2022/08/19/45/","category":"面试","links":{"int":[],"ext":["https://learn.microsoft.com/zh-cn/dotnet/csharp/asynchronous-programming/task-asynchronous-programming-model#BKMK_WhatHappensUnderstandinganAsyncMethod","https://learn.microsoft.com/zh-cn/dotnet/csharp/asynchronous-programming/async-scenarios?source=recommendations#important-info-and-advice","https://www.cnblogs.com/murongxiaopifu/p/4278947.html","https://zhuanlan.zhihu.com/p/44116722","https://zhuanlan.zhihu.com/p/143871184","http://www.codersnotes.com/notes/signed-distance-fields/","https://www.jianshu.com/p/58271568781d","https://docs.unity3d.com/cn/2022.1/ScriptReference/Shader.PropertyToID.html","https://docs.unity3d.com/cn/2022.1/ScriptReference/Material.SetColor.html","https://docs.unity3d.com/cn/2022.1/ScriptReference/MaterialPropertyBlock.html"],"toc":["# 业务","#Unity- 的运行时序","#Unity- 垃圾回收机制","#Unity- 数据持久化你使用过哪些、说说它们之间的优缺点","#PlayerPrefs","#ScriptableObject","# 序列化：Json、XML、二进制","# 几个含 -Serialize- 的相关属性","#C","#List- 的底层原理、Dictionary- 的底层原理","#List- 底层实现浅析","#Add","#Insert","#Remove","# 索引","#Clear","#foreach","#Sort","#Dictionary- 底层实现浅析","#Entry 结构体","#Add- 操作","#Find- 操作","#Remove- 操作","#Resize- 操作（扩容）","#Collection- 版本控制","# 装修拆箱","# 事件委托","# 委托","# 委托的类型：delegate、Action、Func、predicate","# 事件","#Demo","#C- 的异步和 -Unity- 的协程","# 协程 -Coroutine-——- 伪异步","# 线程 -Thread-——- 真异步","# 利用 async 和 await 简化多线程异步调用","# 官方建议","#Coroutine- 的原理、Coroutine- 在哪些场景会被用到","# 值类型和引用类型","# 哪些是值类型，哪些是引用类型","#C- 中 struct 和 class 的区别，分别存放在哪个内存区","#struct 和 class 应用上的区别","# 创建值类型的前提","# 对象池重复依赖和循环依赖的话怎么处理","#Net- 与 -Mono- 的关系","#Net","#Mono","#C- 中抽象类 abstract 和接口 interface 的相同点与区别","# 相同点","# 区别","# 渲染","# 渲染流程","#DrawCall- 是什么、DrawCall- 过高会有什么影响","# 什么是 -DrawCall","# 为什么 -DrawCall- 过高会影响帧率","#DrawCall- 优化方案","#LOD- 是什么，优缺点是什么","#MipMap- 是什么，优缺点是什么","#OverDraw- 是什么，过高会有什么影响，怎么优化 -OverDraw","# 工具","#TextMeshPro","#UGUI- 的 Text 的文字是如何渲染出来","# 游戏中的 -Text-Rendering","#Bitmap-font- 位图字体","#TTF-OTF- 字体","# 基于 -SDF- 绘制","#GPU- 绘制字形","#TextMeshPro-1","#SDF-Signed-Distance-Function","#SDF- 生成算法","#Saito- 的算法","#8ssedt","# 动画系统","# 骨骼动画的原理","# 基础概念","# 局部关节姿势 -Local-Joint-Poses","# 全局关节姿势 -Global-Joint-Poses","# 绑定姿势矩阵（Bind-Poses-Matrix）、绑定姿势逆矩阵（Inversed-Bind-Poses-Matrix）","# 蒙皮矩阵 -Skinning-Matrix","#Animation- 和 -Animator","#Animator- 的性能缺陷","#Lua","#Lua- 如何实现面向对象的三大特性","# 面向对象的实现","# 项目中的多继承实现","#UI","# 什么是图集、图集的作用","# 老版的 -Sprite-Packer- 和新版的 -Sprite-Altas- 的区别","#UGUI- 的优化、实现过最复杂的 -UI- 面板是什么、简述一下自己项目中实现的 -UI- 框架","# 性能消耗的关键点","#Rebatch- 的内部实现","# 针对 -Rebatch- 的优化方法","#Rebuild- 的触发原因","# 针对 -Rebuild- 的优化方法","# 针对组件的优化","# 通用策略","#UGUI- 的理解，简单聊聊你对 -Image- 和 -RawImage- 的理解","# 遮挡 -Mask","#RectMask2D","#Mask","#UGUI- 的重绘顺序是怎样的","# 重绘触发条件","#NGUI- 和 -UGUI- 区别","# 对 -UI- 进行 -SetActive- 这个操作为什么要避免频繁进行，具体做了些什么内容，有什么方法可以代替它","#Canvas- 的三种模式","# 渲染模式","# 屏幕适配","# 资源管理","# 资源管理模块","#AssetBundle- 的原理","# 如何从 -Bundle- 加载一份资源到 -Game- 里面，需要经过几次或者几个内存区","# 如何管理 -AB- 包","# 如何安全卸载 -AB- 包或者 -Asset","# 如何解决依赖","# 处理被依赖的外部资源","# 处理被依赖的内部资源","# 性能优化","# 使用过哪些性能分析工具、性能主要是在考虑哪方面的因素影响","#Unity-Profiler","# 合批的原理，合批有哪些，区别是什么","# 静态合批","# 动态合批","# 动态合批与静态合批的区别","#URP","#SetPassCall- 和 -DrawCall","#SRP-Batcher","#Constant-Buffer","#UnityPerMaterial","#UnityPerDraw","#SRP-Batcher- 原理","# 着色器标识 -Shader-PropertyToID"]}},{"title":"Unity Shader","source":"_posts/46.md","path":"2022/11/25/46/","category":"Graphics","links":{"int":[],"ext":[],"toc":["# 零散的知识","# 普通纹理绘制"]}},{"title":"Lua解释器构建：从虚拟机到编译器——笔记","source":"_posts/48.md","path":"2023/04/03/48/","category":"读书笔记","links":{"int":[],"ext":[],"toc":["# 增量式标记清除算法","#Lua- 虚拟机的字符串","#Lua- 虚拟机的表","#Lua- 表的基本数据结构","# 键值的哈希运算","# 调整表的大小","#Lua- 中的三种函数类别","#Light-C-Function","#C- 闭包","#Lua- 闭包","#Proto 结构","# 上值生成过程"]}},{"title":"Life of a triangle","source":"_posts/49.md","path":"2023/04/20/49/","category":"图形学","links":{"int":[],"ext":["https://developer.nvidia.com/content/life-triangle-nvidias-logical-pipeline"],"toc":[]}},{"title":"Unity 技术美术 - Shader 篇","source":"_posts/47.md","path":"2023/04/03/47/","category":"图形学","links":{"int":[],"ext":[],"toc":["# 片段着色器","# 图元、片元和像素","#ShaderLab- 模板","#SubShader","# 常用的 cginc","# 材质属性 Properties","# 语法格式","# 混合操作","#Shader 中的时间 -Time","# 相关术语","# 菲涅尔效应"]}},{"title":"客户端自动战斗 AI","source":"_posts/50.md","path":"2024/05/09/50/","category":"面试","links":{"int":[],"ext":["https://docs.unity3d.com/ScriptReference/RenderTexture.GetTemporary.html"],"toc":["# 客户端自动战斗 -AI","#Behaviour-Designer- 行为树插件","#AI- 的解决方案","#Behaviour-Designer- 中的 -Task","#Action- 和 -Conditional- 自定义 -Task","# 常用的 -Parent-Tasks","# 变量相关","#Behaviour-Designer- 中的共享变量的理解","#RO- 中的 MShareData","# 可共享的变量类型","#AI- 节点中变量名和值的存储","#PB- 数据","# 客户端行为树的 -Node- 生成","# 运行时 -AI","# 初始化","# 调用逻辑","# 客户端如何进行自动释放","# 相关改进","# 附身","# 需求","# 实现方式","#Odin-OdinMenuTree","#UI- 框架","#Windows- 生命周期","#UIBase","#UIManager","# 设置 -UI- 层级（UILayer）","# 界面类型（ActiveType）","# 剧本解析","# 代码结构","# 解析特殊表达式","#UI-Renderer-Texture","# 使用 -URP- 管线进行 -RT- 渲染","# 自定义 MCBRTRendererFeature","#TimeLine","# 运行时","#MCutSceneMgr","# 其他辅助类","#PlayableBehaviour、PlayableAsset 和 TrackAsset","# 资源管理","#RO- 的资源打包流程","# 打 -AB- 流程","# 读表","# 读取整表","# 读取一行","#Hash"]}},{"title":"面经","source":"_posts/51.md","path":"2024/05/13/51/","category":"面试","links":{"int":[],"ext":["https://github.com/zhyingkun/lua-5.3.5/blob/master/liblua/libraries/ldblib.c"],"toc":["# 波克城市","# 协程是否共享堆栈","# 透明物体位于 -Unity- 哪个渲染阶段","# 已知法向纹理，如何还原法线向量","# 如何计算 -MipMap- 个数","# 描述 -Blooming- 方法","# 如何解决 -AssetBundle- 依赖","#B- 站","# 图集是怎样生成的","# 资源加载","#Unity-AssetDatabase 和 Resources 资源管理","# 叠纸一面","#C- 调用 -Lua-GC- 是如何产生的，如何避免 -GC","#UGUI- 自适应大小","# 如何避免装箱拆箱","#Lua- 元表是什么","#TimeLine- 和 -Animator","#Animator- 如何解决帧数冲突","#Lua- 插入哈希表还是数组","#readonly 和 const 区别","# 叠纸二面","#Used-Total- 和 -Reserved-Total","# 如何实现历史记录","#EditorWindow 生命周期","#Animation-Clip 数据结构","# 协程的原理","#yield 和 IEnumerator 什么关系","#Unity- 协程机制的实现原理","# 游卡","#LoopScrollView","#UI- 框架","# 表格加载","# 莉莉丝","#C- 字符串优化","# 图片压缩","# 叠纸三面","#C- 内存分配","# 堆和栈的访问速度","#C-GC","#Lua- 元表","# 红点系统","# 米哈游一面","#Top-K- 问题","#Lua- 和 -C- 交互","#Rebatch- 和 -Rebuild- 的作用","# 前向渲染和延迟渲染","# 网易","#C- 构造函数可以是虚函数吗","# 为什么构造函数不可以是虚函数","# 从内存的角度看","# 从使用的角度看","# 为什么析构函数可以是虚函数","# 渲染流程，CPU- 阶段的剔除操作有哪些","# 视锥体剔除","# 层级剔除","# 遮挡剔除","#LRU- 算法","# 普通实现","# 借助 OrderedDict","# 缓存算法","#FIFO- 算法","#LRU：Least-Recently-used","#LFU：Least-Frequency-Used","#","#Unity- 资源管理","# 为什么要用 -AB- 包","# 获取 -AB- 包方法","# 加载资源方法","#LZMA- 和 -LZ4","# 内存占用","#AB- 包内部结构","# 依赖问题","# 细粒度问题","# 卸载问题","# 各种 -ID","#Lua- 弱表","# 弱表的用途","#C- 委托和 event 区别","#Lambda- 表达式的捕获变量","#Lua- 空表大小","#C- 字典原理","#C- 变量赋值","#Unity 中影响渲染顺序的因素","# 模型深度的控制","# 粒子特效渲染层级的控制"]}},{"title":"DIY 摆放","source":"_posts/52.md","path":"2024/05/31/52/","category":"Unity","links":{"int":[],"ext":[],"toc":["# 分析","# 相关细节","# 自定义网格","# 可放置物件","# 遮挡和排序","# 工具"]}},{"title":"现代 C++ 基础","source":"_posts/53.md","path":"2024/06/03/53/","category":"none","links":{"int":[],"ext":[],"toc":[]}},{"title":"ProtoBuf 的基本原理","source":"_posts/54.md","path":"2024/06/04/54/","category":"none","links":{"int":[],"ext":["https://sunyunqiang.com/blog/protobuf_encode/"],"toc":["#1-1-Varints- 编码","#1-2-Zigzag- 编码","#1-4- 总结"]}},{"title":"XLua 如何与 C# 进行交互","source":"_posts/55.md","path":"2024/06/04/55/","category":"none","links":{"int":[],"ext":["https://www.cnblogs.com/iwiniwin/p/15307368.html","https://github.com/Tencent/xLua"],"toc":["#Lua- 与 -C- 数据通信机制","# 传递 -C- 对象到 -Lua","# 注册 -C- 类型信息到 -Lua","#TryDelayWrapLoader- 主要用来处理两种情况","# 使用生成函数填充元表","# 生成函数 -Register 主要是这样一个框架","# 使用反射填充元表","# 调用 -C- 方法时参数的传递","#GC"]}}],"port":1234,"previewHost":"localhost:4000/"}